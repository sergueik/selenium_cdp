package com.github.sergueik.selenium;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.lang.NullPointerException;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.devtools.v138.input.Input;
import org.openqa.selenium.devtools.v138.input.Input.DispatchKeyEventType;
import org.openqa.selenium.devtools.v138.input.model.TimeSinceEpoch;

/**
 * Selected test scenarios for Selenium 4 Chrome Developer Tools bridge
 * https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
 * 
 * @author: Serguei Kouzmine (kouzmine_serguei@yahoo.com)
 */
// TODO: test org.openqa.selenium.bidi.module.Input

public class InputDevToolsTest extends BaseDevToolsTest {

	private final static String baseURL = "https://www.google.com";
	private static String command;
	private static Map<String, Object> params = new HashMap<>();

	@Before
	public void beforeTest() throws Exception {
		driver.get(baseURL);
	}

	@Test
	public void test1() {

		// @formatter:off
		DispatchKeyEventType type = DispatchKeyEventType.KEYDOWN;
		int modifiers = 2;
		TimeSinceEpoch TimeSinceEpoch = new TimeSinceEpoch(1712970971);
		// NOTE: java.base/java.util.Objects.requireNonNul
		// String keyIdentifier = null;
		String keyIdentifier = "";
		String text = "a";
		chromeDevTools.send(Input.dispatchKeyEvent(type,
				// Type of the key event. Allowed Values: keyDown, keyUp,
				// rawKeyDown, char
				Optional.of(modifiers),
				// Bit field representing pressed modifier keys. Alt=1, Ctrl=2,
				// Meta/Command=4, Shift=8 (default: 0).
				Optional.of(TimeSinceEpoch), // Time at which the event occurred
				// Time at which the event occurred. Null values not allowed
				Optional.of(text), // text as generated by processing a virtual
				// text as generated by processing a virtual key code with a
				// keyboard layout (default: "").
				// Not needed for for keyUp and rawKeyDown events
				Optional.empty(),
				// text that would have been generated by the keyboard if
				// no modifiers were pressed (except for shift).
				// Useful for shortcut (accelerator) key handling (default: "")
				Optional.of(keyIdentifier),
				// Unique key identifier (e.g., 'U+0041') (default: "").
				Optional.of(""),
				// Unique DOM defined string value for each physical key (e.g.,
				// 'KeyA') (default: "")
				Optional.of(""),
				// Unique DOM defined string value describing the meaning of the
				// key
				Optional.of(0),
				// Windows virtual key code (default: 0)
				Optional.empty(),
				// nativeVirtualKeyCode
				Optional.of(false),
				// autoRepeat
				Optional.of(false),
				// isKeypad
				Optional.of(false),
				// isSystemKey
				Optional.of(0),
				// location
				Optional.of(new ArrayList<String>())
		// commands
		));
		// @formatter:on
		Utils.sleep(10000);
	}

	@Test(expected = NullPointerException.class /*
												 * from java.util.Objects.
												 * requireNonNul
												 */ )
	public void test2() {

		// @formatter:off
		DispatchKeyEventType type = DispatchKeyEventType.KEYDOWN;
		int modifiers = 2;
		TimeSinceEpoch TimeSinceEpoch = null;
		// NOTE: java.base/java.util.Objects.requireNonNul
		// String keyIdentifier = null;
		String keyIdentifier = "";
		String text = "a";
		// This method emulates inserting text that doesn't come from a key press, for example an emoji keyboard or an IME.
		// Input.insertText(text)
		// https://stackoverflow.com/questions/51706256/sending-emojis-with-seleniums-send-keys
		chromeDevTools.send(Input.dispatchKeyEvent(type,
				// Type of the key event. Allowed Values: keyDown, keyUp,
				// rawKeyDown, char
				Optional.of(modifiers),
				// Bit field representing pressed modifier keys. Alt=1, Ctrl=2,
				// Meta/Command=4, Shift=8 (default: 0).
				Optional.of(TimeSinceEpoch), // Time at which the event occurred
				// Time at which the event occurred. Null values not allowed
				Optional.empty(), // text as generated by processing a virtual
				// text as generated by processing a virtual key code with a
				// keyboard layout (default: "").
				// Not needed for for keyUp and rawKeyDown events
				Optional.empty(),
				// text that would have been generated by the keyboard if
				// no modifiers were pressed (except for shift).
				// Useful for shortcut (accelerator) key handling (default: "")
				Optional.empty(),
				// Unique key identifier (e.g., 'U+0041') (default: "").
				Optional.empty(),
				// Unique DOM defined string value for each physical key (e.g.,
				// 'KeyA') (default: "")
				Optional.of(""),
				// Unique DOM defined string value describing the meaning of the
				// key
				Optional.empty(),
				// Windows virtual key code (default: 0)
				Optional.empty(),
				// nativeVirtualKeyCode
				Optional.of(false),
				// autoRepeat
				Optional.of(false),
				// isKeypad
				Optional.of(false),
				// isSystemKey
				Optional.of(0),
				// location
				Optional.empty()
		// commands
		));
		// @formatter:on
	}

}
